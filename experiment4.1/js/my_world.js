"use strict";

/* global XXH */
/* exported --
    p3_preload
    p3_setup
    p3_worldKeyChanged
    p3_tileWidth
    p3_tileHeight
    p3_tileClicked
    p3_drawBefore
    p3_drawTile
    p3_drawSelectedTile
    p3_drawAfter
*/

function p3_preload() {
}

function p3_setup() {}

let worldSeed;

function p3_worldKeyChanged(key) {
  worldSeed = XXH.h32(key, 0);
  noiseSeed(worldSeed);
  randomSeed(worldSeed);
}

function p3_tileWidth() {
  return 32;
}
function p3_tileHeight() {
  return 16;
}

let [tw, th] = [p3_tileWidth(), p3_tileHeight()];

let clicks = {};

function p3_tileClicked(i, j) {
  let key = [i, j];
  clicks[key] = 1 + (clicks[key] | 0);
}

function p3_drawBefore() {}

function p3_drawTile(i, j) {
  let alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
  let randLetter = alphabet[floor(random(0,26))]
  
  
  push();
  //noStroke();
  beginShape();
  vertex(-tw, 0);
  vertex(0, th);
  vertex(tw, 0);
  vertex(0, -th);
  endShape(CLOSE);
  pop()
  
  let n = clicks[[i, j]] | 0;
  if (n % 2 == 1) {
    push()
    noStroke()
    fill(170, 178, 174);
    ellipse(0, 0, 20, 20);
    pop()
    let adjacent = [
      [i + 1, j],    
      [i - 1, j],    
      [i, j + 1],    
      [i, j - 1],     
    ];
    
    //Logic generated by chatGPT
    for (let [ni, nj] of adjacent) {
      if ((clicks[[ni, nj]] | 0) % 2 === 1) {
        let dx = (ni - i - (nj - j)) * (tw / 2);
        let dy = (ni - i + (nj - j)) * (th / 2);
        strokeWeight(2)
        line(0, 0, -dx, dy);
      }
    }
  }
  
  push()
  randomSeed(XXH.h32("letter:" + [i, j], worldSeed))
  print(randLetter)
  textSize(15);
  rotate(0)
  text(randLetter,-5,5)

  pop()
}

function p3_drawSelectedTile(i, j) {
  noFill();
  stroke(0, 255, 0, 128);

  beginShape();
  vertex(-tw, 0);
  vertex(0, th);
  vertex(tw, 0);
  vertex(0, -th);
  endShape(CLOSE);

  noStroke();
  fill(0);
  text("tile " + [i, j], 0, 0);
}

function p3_drawAfter() {}
